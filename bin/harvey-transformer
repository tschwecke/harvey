#!/usr/bin/env node

var pkg = require('../package.json');
var path = require('path')
var commandLine = require('commander');
var options = getCommandLineArguments();
var loadJson = require('../lib/util/loadJson.js');
var cliUtils = require('../lib/util/cli.js');

var reporterFactory = require('../lib/reporters/reporterFactory.js');
var reporter = (options.reporter === 'none') ? null : reporterFactory.createReporter(options.reporter || 'console');

if (!reporter) {
	cliUtils.fail('No reporter specified');
}

var config;
try {
	config = (options.configFile) ? require(path.resolve(options.configFile)) : {};
} catch(ex) {
	cliUtils.fail(ex);
}

if (options.jsonResults) {
  var overallResults;
  try {
    overallResults = loadJson(options.jsonResults);
  } catch (err) {
    processJson(err);
    return;
  }
  processJson(null, overallResults);
} else {
	stdin(processJson);
}

function processJson(err, overallResults) {
	if (err) {
		cliUtils.fail(err);
	}

	overallResults.timeStarted = new Date(overallResults.timeStarted);
	overallResults.timeEnded = new Date(overallResults.timeEnded);

	overallResults.suiteResults = overallResults.suiteResults.map(function(result){
		result.timeStarted = new Date(result.timeStarted);
		result.timeEnded = new Date(result.timeEnded);
		return result;
	})

	reporter.reportResults(overallResults, config, process.stdout, function(error) {
		process.exit(overallResults.testsFailed);
	});
}

function getCommandLineArguments() {
	commandLine
		.version(pkg.version)
		.usage('[options] <file ...>')
		.option('-c, --config-file <path>', 'The path to the config file')
		.option('-j, --json-results <path>', 'The path to the json results file, Required')
		.option('-r, --reporter <console|json|html|none>', 'Which reporter to use for transforming the results. Defaults to console.')
		.parse(process.argv);

	return commandLine;
}

function stdin(fn) {
	var data = '';

	process.stdin.setEncoding('utf8');
	process.stdin.on('readable', function() {
		var chunk = process.stdin.read();
		if (chunk !== null) data += chunk;
	});

	process.stdin.on('end', function() {
		data = JSON.parse(data);
		fn(null, data);
	});
}
